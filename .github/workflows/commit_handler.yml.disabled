name: Commit Handler

on:
  push:
    branches-ignore:
      - '*'

jobs:
  handle_commits:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Process Commits
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commitMessage = context.payload.head_commit.message;
            const taskRegex = /#task-(\d+)/; // Assuming you use #task-<task_number> in commit messages
            const match = commitMessage.match(taskRegex);

            if (match) {
              const taskId = match[1]; // Extract the task ID from the commit message
              const issueNumber = /* Logic to find the associated issue number based on task ID */;

              // Comment on the issue with the commit details
              await github.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `Commit made for task #${taskId}: ${commitMessage}`
              });

              // Check if all tasks in the issue are completed
              const issue = await github.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });

              const allTasksCompleted = /* Logic to check if all tasks are completed based on the issue body */;

              if (allTasksCompleted) {
                // Increment the minor version for the issue completion
                const currentVersion = process.env.version;
                const [major, minor, patch] = currentVersion.split('.').map(Number);
                const newVersion = `${major}.${minor + 1}.0`;

                // Update the version in todolist.yml
                const fs = require('fs');
                const yaml = require('js-yaml');
                const todolistPath = 'todolist.yml';
                const todolistData = yaml.load(fs.readFileSync(todolistPath, 'utf8'));

                // Update the main version
                todolistData.version = newVersion;
                fs.writeFileSync(todolistPath, yaml.dump(todolistData));

                // Create a new Git tag
                await github.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/tags/v${newVersion}`,
                  sha: context.sha
                });

                // Move the issue to the "Done" column
                const projectId = /* Logic to get the project ID */;
                const columnIds = /* Logic to get the column IDs */;
                await github.projects.moveCard({
                  card_id: issue.id, // This will need to be the card ID in the project
                  position: 'top',
                  column_id: columnIds[2] // Move to "Done"
                });
              }
            }
