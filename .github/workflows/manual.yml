name: Project Setup

on:
  workflow_dispatch: # Allows manual triggering from the GitHub website

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Load Tasks from YAML
        id: load_tasks
        run: |
          echo "Loading tasks from todolist.yml"
          npm install js-yaml # Install js-yaml locally
          node -e "const fs = require('fs'); const yaml = require('js-yaml'); const data = yaml.load(fs.readFileSync('todolist.yml', 'utf8')); console.log(JSON.stringify(data));" > tasks.json
          echo "tasks=$(cat tasks.json)" >> $GITHUB_ENV

      - name: Create Project and Columns
        id: create_project
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const projectName = repo; // Use the repository name as the project name
            
            // Create a new project
            const project = await github.rest.projects.createForRepo({
              owner: owner,
              repo: repo,
              name: projectName,
              body: "This project tracks todos and issues."
            });
            
            // Create columns in the project
            const columnNames = ["To Do", "In Progress", "Done"];
            const projectId = project.data.id;
            const columnIds = await Promise.all(columnNames.map(async (name) => {
              const column = await github.rest.projects.createColumn({
                project_id: projectId,
                name: name
              });
              return column.data.id;
            }));
            
            return { projectId: projectId, columnIds: columnIds };

      - name: Create Branches and Issues
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const todos = JSON.parse(process.env.tasks);
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const assignee = owner; // Assign issues to the repo owner
            const projectId = ${{ steps.create_project.outputs.projectId }}; // Get the project ID
            const columnIds = JSON.parse(${{ steps.create_project.outputs.columnIds }}); // Get the column IDs

            // Create issues and tasks based on the loaded YAML
            for (const branch of todos.branches) {
              const branchName = branch.branch;

              // Create the branch if it doesn't exist
              try {
                await github.rest.git.createRef({
                  owner: owner,
                  repo: repo,
                  ref: `refs/heads/${branchName}`,
                  sha: context.sha
                });
              } catch (error) {
                if (error.status !== 422) { // Ignore if the branch already exists
                  console.log(`Failed to create branch ${branchName}: ${error.message}`);
                } else {
                  console.log(`Branch ${branchName} already exists.`);
                }
              }

              for (const issue of branch.issues) {
                const milestone = issue.milestone; // Unique milestone for each issue
                const issueResponse = await github.rest.issues.create({
                  owner: owner,
                  repo: repo,
                  title: issue.issue,
                  body: `
                    Tasks:
                    ${issue.todos.map((todo) => `- [ ] ${todo.task} (${todo.label})`).join('\n')}
                  `,
                  labels: [issue.todos[0].label], // Use the label from the first todo for labeling
                  assignees: [assignee],
                  milestone: milestone // Assign unique milestone from the issue
                });

                // Add the issue to the project in the "To Do" column
                await github.rest.projects.createCard({
                  column_id: columnIds[0], // "To Do" column
                  content_id: issueResponse.data.id,
                  project_id: projectId // Use the retrieved project ID
                });

                // Create comments for each todo in the issue
                for (const todo of issue.todos) {
                  await github.rest.issues.createComment({
                    owner: owner,
                    repo: repo,
                    issue_number: issueResponse.data.number,
                    body: `- [ ] ${todo.task} (Label: ${todo.label})`
                  });
                }

                // Mention the reviewer in a comment
                await github.rest.issues.createComment({
                  owner: owner,
                  repo: repo,
                  issue_number: issueResponse.data.number,
                  body: `@${assignee}, please review this issue.`
                });
              }
            }
